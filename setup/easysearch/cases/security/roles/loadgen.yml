runner:
  total_rounds: 1
  no_warm: true
  log_requests: true
  assert_invalid: true
  assert_error: true
requests:
  - request:
      method: DELETE
      url: $[[env.ES_ENDPOINT]]/_security/role/test-role
      basic_auth:
        username: $[[env.ES_USERNAME]]
        password: $[[env.ES_PASSWORD]]
  - request:
      method: GET
      url: $[[env.ES_ENDPOINT]]/_security/role/
      basic_auth:
        username: $[[env.ES_USERNAME]]
        password: $[[env.ES_PASSWORD]]
    assert:
      equals:
        _ctx.response.status: 200
  - request:
      method: PUT
      url: $[[env.ES_ENDPOINT]]/_security/role/test-role
      basic_auth:
        username: $[[env.ES_USERNAME]]
        password: $[[env.ES_PASSWORD]]
      body: |
        {
        "cluster": ["all"],
          "indices": [
            {
              "names": [ "index1", "index2" ],
              "privileges": ["all"],
              "field_security" : [],
              "query": "{\"match\": {\"title\": \"foo\"}}"
            }
          ]
        }
    assert:
      equals:
        _ctx.response.status: 201
        _ctx.response.body_json.status: CREATED
  - request:
      method: PUT
      url: $[[env.ES_ENDPOINT]]/_security/role/test-role
      basic_auth:
        username: $[[env.ES_USERNAME]]
        password: $[[env.ES_PASSWORD]]
      body: |
        {
        "cluster": ["all"],
          "indices": [
            {
              "names": [ "index1", "index2" ],
              "privileges": ["all"],
              "field_security" : ["myfield1"],
              "query": "{\"match\": {\"title\": \"foo\"}}"
            }
          ]
        }
    assert:
      equals:
        _ctx.response.status: 200
        _ctx.response.body_json.status: OK
  - request:
      method: GET
      url: $[[env.ES_ENDPOINT]]/_security/role/test-role
      basic_auth:
        username: $[[env.ES_USERNAME]]
        password: $[[env.ES_PASSWORD]]
    assert:
      equals:
        _ctx.response.status: 200
  - request:
      method: PATCH
      url: $[[env.ES_ENDPOINT]]/_security/role/test-role
      basic_auth:
        username: $[[env.ES_USERNAME]]
        password: $[[env.ES_PASSWORD]]
      body: |
        [
          {
            "op": "replace", "path": "/indices/0/field_security", "value": ["myfield1", "myfield2"]
          },
          {
            "op": "remove", "path": "/indices/0/query"
          }
        ]
    assert:
      equals:
        _ctx.response.status: 200
        _ctx.response.body_json.status: OK
  - request:
      method: GET
      url: $[[env.ES_ENDPOINT]]/_security/role/test-role
      basic_auth:
        username: $[[env.ES_USERNAME]]
        password: $[[env.ES_PASSWORD]]
    assert:
      equals:
        _ctx.response.status: 200
  - request:
      method: DELETE
      url: $[[env.ES_ENDPOINT]]/_security/role/test-role
      basic_auth:
        username: $[[env.ES_USERNAME]]
        password: $[[env.ES_PASSWORD]]
    assert:
      equals:
        _ctx.response.status: 200
